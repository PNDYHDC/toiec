const express = require('express');
const db = require('../../db'); // K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu MySQL (toeic_floor2)
const { verifyRole } = require('../middlewares/auth'); // Middleware ph√¢n quy·ªÅn

const router = express.Router();
// üìå L·∫•y ng·∫´u nhi√™n 1 c√¢u h·ªèi Maze Popup
router.get('/random', async (req, res) => {
    try {
        const conn = db.promise();
        const [rows] = await conn.query(`SELECT * FROM floor2_maze_popup ORDER BY RAND() LIMIT 1`);
        if (rows.length > 0) {
            res.status(200).json({ status: true, data: rows[0] });
        } else {
            res.status(404).json({ status: false, message: 'Kh√¥ng c√≥ c√¢u h·ªèi n√†o' });
        }
    } catch (error) {
        res.status(500).json({ status: false, message: 'L·ªói m√°y ch·ªß', details: error.message });
    }
});
// üìå L·∫•y t·∫•t c·∫£ c√¢u h·ªèi Maze Popup
router.get('/', async (req, res) => {
    try {
        const conn = db.promise();
        const [rows] = await conn.query(`SELECT * FROM floor2_maze_popup`);
        res.status(200).json({ status: true, data: rows });
    } catch (error) {
        res.status(500).json({ status: false, message: 'L·ªói m√°y ch·ªß', details: error.message });
    }
});

// üìå L·∫•y c√¢u h·ªèi Maze Popup theo ID
router.get('/:id', async (req, res) => {
    try {
        const conn = db.promise();
        const [rows] = await conn.query(`SELECT * FROM floor2_maze_popup WHERE id = ?`, [req.params.id]);
        if (rows.length > 0) {
            res.status(200).json({ status: true, data: rows[0] });
        } else {
            res.status(404).json({ status: false, message: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi' });
        }
    } catch (error) {
        res.status(500).json({ status: false, message: 'L·ªói m√°y ch·ªß', details: error.message });
    }
});

// üìå T·∫°o m·ªõi c√¢u h·ªèi Maze Popup (ch·ªâ cho admin)
router.post('/', verifyRole('admin'), async (req, res) => {
    try {
        const { audio_url, options, correct_answer } = req.body;
        const conn = db.promise();
        const [result] = await conn.query(
            `INSERT INTO floor2_maze_popup (audio_url, options, correct_answer) VALUES (?, ?, ?)`,
            [audio_url, JSON.stringify(options), correct_answer],
        );
        res.status(201).json({ status: true, message: 'T·∫°o c√¢u h·ªèi th√†nh c√¥ng', id: result.insertId });
    } catch (error) {
        res.status(500).json({ status: false, message: 'L·ªói m√°y ch·ªß', details: error.message });
    }
});

// üìå C·∫≠p nh·∫≠t c√¢u h·ªèi Maze Popup theo ID (ch·ªâ cho admin)
router.put('/:id', verifyRole('admin'), async (req, res) => {
    try {
        const { audio_url, options, correct_answer } = req.body;
        const conn = db.promise();
        const [result] = await conn.query(
            `UPDATE floor2_maze_popup SET audio_url = ?, options = ?, correct_answer = ? WHERE id = ?`,
            [audio_url, JSON.stringify(options), correct_answer, req.params.id],
        );
        if (result.affectedRows > 0) {
            res.status(200).json({ status: true, message: 'C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng' });
        } else {
            res.status(404).json({ status: false, message: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ƒë·ªÉ c·∫≠p nh·∫≠t' });
        }
    } catch (error) {
        res.status(500).json({ status: false, message: 'L·ªói m√°y ch·ªß', details: error.message });
    }
});

// üìå X√≥a c√¢u h·ªèi Maze Popup theo ID (ch·ªâ cho admin)
router.delete('/:id', verifyRole('admin'), async (req, res) => {
    try {
        const conn = db.promise();
        const [result] = await conn.query(`DELETE FROM floor2_maze_popup WHERE id = ?`, [req.params.id]);
        if (result.affectedRows > 0) {
            res.status(200).json({ status: true, message: 'X√≥a c√¢u h·ªèi th√†nh c√¥ng' });
        } else {
            res.status(404).json({ status: false, message: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ƒë·ªÉ x√≥a' });
        }
    } catch (error) {
        res.status(500).json({ status: false, message: 'L·ªói m√°y ch·ªß', details: error.message });
    }
});

module.exports = router;
