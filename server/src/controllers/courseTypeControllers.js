const express = require('express');
const db = require('../../db'); // k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu MySQL
const { verifyRole } = require('../middlewares/auth'); // middleware ph√¢n quy·ªÅn

const router = express.Router();

// üìå L·∫•y t·∫•t c·∫£ lo·∫°i kh√≥a h·ªçc
router.get('/', async (req, res) => {
    try {
        const conn = db.promise();
        const [rows] = await conn.query(`SELECT * FROM course_types`);
        res.status(200).json({ status: true, data: rows });
    } catch (error) {
        res.status(500).json({ status: false, message: 'L·ªói m√°y ch·ªß', details: error.message });
    }
});

// üìå L·∫•y lo·∫°i kh√≥a h·ªçc theo ID
router.get('/:id', async (req, res) => {
    try {
        const conn = db.promise();
        const [rows] = await conn.query(`SELECT * FROM course_types WHERE id = ?`, [req.params.id]);

        if (rows.length === 0) {
            return res.status(404).json({ status: false, message: 'Kh√¥ng t√¨m th·∫•y lo·∫°i kh√≥a h·ªçc' });
        }

        res.status(200).json({ status: true, data: rows[0] });
    } catch (error) {
        res.status(500).json({ status: false, message: 'L·ªói m√°y ch·ªß', details: error.message });
    }
});

// üìå T·∫°o lo·∫°i kh√≥a h·ªçc m·ªõi (ch·ªâ admin)
const { v4: uuidv4 } = require('uuid');

router.post('/add', verifyRole('admin'), async (req, res) => {
    try {
        const { name } = req.body;
        if (!name) return res.status(400).json({ status: false, message: 'T√™n l√† b·∫Øt bu·ªôc' });

        const id = uuidv4(); // ‚úÖ T·∫°o UUID m·ªõi

        const conn = db.promise();
        await conn.query(`INSERT INTO course_types (id, name) VALUES (?, ?)`, [id, name]);

        const [newRows] = await conn.query(`SELECT * FROM course_types WHERE id = ?`, [id]);

        res.status(201).json({ status: true, data: newRows[0] });
    } catch (error) {
        res.status(500).json({ status: false, message: 'T·∫°o lo·∫°i kh√≥a h·ªçc th·∫•t b·∫°i', details: error.message });
    }
});


// üìå C·∫≠p nh·∫≠t lo·∫°i kh√≥a h·ªçc (ch·ªâ admin)
router.put('/:id', verifyRole('admin'), async (req, res) => {
    try {
        const { name } = req.body;

        const conn = db.promise();
        const [rows] = await conn.query(`SELECT * FROM course_types WHERE id = ?`, [req.params.id]);
        if (rows.length === 0) {
            return res.status(404).json({ status: false, message: 'Kh√¥ng t√¨m th·∫•y lo·∫°i kh√≥a h·ªçc' });
        }

        await conn.query(`UPDATE course_types SET name = ? WHERE id = ?`, [name || rows[0].name, req.params.id]);

        const [updated] = await conn.query(`SELECT * FROM course_types WHERE id = ?`, [req.params.id]);
        res.status(200).json({ status: true, data: updated[0] });
    } catch (error) {
        res.status(500).json({ status: false, message: 'C·∫≠p nh·∫≠t th·∫•t b·∫°i', details: error.message });
    }
});

// üìå X√≥a lo·∫°i kh√≥a h·ªçc (ch·ªâ admin)
router.delete('/:id', verifyRole('admin'), async (req, res) => {
    try {
        const conn = db.promise();
        const [rows] = await conn.query(`SELECT * FROM course_types WHERE id = ?`, [req.params.id]);

        if (rows.length === 0) {
            return res.status(404).json({ status: false, message: 'Kh√¥ng t√¨m th·∫•y lo·∫°i kh√≥a h·ªçc' });
        }

        await conn.query(`DELETE FROM course_types WHERE id = ?`, [req.params.id]);

        res.status(200).json({ status: true, message: 'X√≥a th√†nh c√¥ng' });
    } catch (error) {
        res.status(500).json({ status: false, message: 'X√≥a th·∫•t b·∫°i', details: error.message });
    }
});

module.exports = router;
